esphome:
  name: sunsynk

substitutions:
  settings_skipped_updates: "5"

esp32:
  board: nodemcu-32s
  framework:
    type: arduino

# Enable logging
logger:
  baud_rate: 0

# Enable Home Assistant API
api:
  encryption:
    key: "##"

ota:
  password: "##"

wifi:
  ssid: "##"
  password: "##"

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "Sunsynk Fallback Hotspot"
    password: "##"

  fast_connect: true
  power_save_mode: none

captive_portal:

# Enable time component to reset energy at midnight
# https://esphome.io/components/time.html#home-assistant-time-source
time:
  - platform: homeassistant
    id: homeassistant_time
     
uart:
 id: mod_bus
 tx_pin: GPIO1
 rx_pin: GPIO3
 baud_rate: 9600
 stop_bits: 1
 
modbus:
 id: sunsynk_modbus
 flow_control_pin: GPIO16
 
modbus_controller:
 - id: sunsynk
   address: 0x01
   modbus_id: sunsynk_modbus
   setup_priority: -10
   update_interval: 20000ms
   command_throttle: "50ms"

binary_sensor:           
 - platform: modbus_controller # 194 Grid Connected Status
   modbus_controller_id: sunsynk
   name: "Grid Connected Status"
   id: grid_connected_status
   register_type: holding
   address: 194


sensor:
 - platform: modbus_controller   #72 Battery Charge Total
   modbus_controller_id: sunsynk
   name: "Total Battery Charge (kWh)"
   id: total_battery_charge_kwh
   register_type: holding
   address: 72
   unit_of_measurement: "kWh"
   accuracy_decimals: 1
   device_class: energy
   state_class: total_increasing
   filters:
    - lambda: |-
           x = x / -1;
           if (x > 32767) return (0 - x + 65535) /10;
           else return (0 - x) /10;

 - platform: modbus_controller  #74 Battery Discharge Total
   modbus_controller_id: sunsynk
   name: "Total Battery Discharge (kWh)"
   id: total_battery_discharge_kwh
   register_type: holding
   address: 74
   unit_of_measurement: "kWh"
   accuracy_decimals: 1
   device_class: energy
   state_class: total_increasing
   filters:
    - lambda: |-
           if (x > 32767) return (x - 65535) /10;
           else return (x) /10;

 - platform: modbus_controller  # 81 Grid Export Total (Sell)
   modbus_controller_id: sunsynk
   name: "Total Grid Export (kWh)"
   id: total_grid_export_kwh
   register_type: holding
   address: 81
   unit_of_measurement: "kWh"
   accuracy_decimals: 2
   device_class: energy
   state_class: total_increasing
   filters:
    - lambda: |-
           if (x > 32767) return (x - 65535) / 10;
           else return x /10;

 - platform: modbus_controller  # 78 Grid Import Total (Buy)
   modbus_controller_id: sunsynk
   name: "Total Grid Import (kWh)"
   id: total_grid_import_kwh
   register_type: holding
   address: 78
   unit_of_measurement: "kWh"
   accuracy_decimals: 2
   device_class: energy
   state_class: total_increasing
   filters:
     - multiply: 0.1

 - platform: modbus_controller  # 85 Load Power Total
   modbus_controller_id: sunsynk
   name: "Total Load Power (kWh)"
   id: total_load_power_kwh
   register_type: holding
   address: 85
   unit_of_measurement: "kWh"
   accuracy_decimals: 2
   device_class: energy
   state_class: total_increasing
   filters:
     - multiply: 0.1

 - platform: modbus_controller
   modbus_controller_id: sunsynk
   name: "Total PV Power (kWh)"
   id: total_pv_power_kwh
   register_type: holding
   address: 96
   unit_of_measurement: "kWh"
   accuracy_decimals: 2
   device_class: energy
   state_class: total_increasing
   filters:
     - multiply: 0.1

 - platform: modbus_controller # 169 Grid Power
   modbus_controller_id: sunsynk
   name: "Grid Power"
   id: grid_power
   register_type: holding
   address: 169
   unit_of_measurement: "W"
   accuracy_decimals: 0
   device_class: power
   state_class: measurement
   value_type: S_WORD
   filters: #GOOD
    - lambda: |-
           if (x > 32767) return (x - 65535) /1;
           else return (x) /1;

 - platform: modbus_controller # 172 Grid External Power
   modbus_controller_id: sunsynk
   name: "Grid External Power"
   id: grid_external_power
   register_type: holding
   address: 172
   unit_of_measurement: "W"
   accuracy_decimals: 0
   device_class: power
   state_class: measurement
   value_type: S_WORD
   filters: #GOOD
    - lambda: |-
           if (x > 32767) return (x - 65535) /1;
           else return (x) /1;

 - platform: modbus_controller # 178 Load Power
   modbus_controller_id: sunsynk
   name: "Load Power"
   id: load_power
   register_type: holding
   address: 178
   unit_of_measurement: "W"
   accuracy_decimals: 0
   device_class: power
   state_class: measurement
   value_type: S_WORD
   filters: #GOOD
    - lambda: |-
           if (x > 32767) return (x - 65535) /1;
           else return (x) /1;
   
 - platform: modbus_controller   # 186 PV1 Power
   modbus_controller_id: sunsynk
   name: "PV1 Power"
   id: pv1_power
   register_type: holding
   address: 186
   unit_of_measurement: "W"
   accuracy_decimals: 0
   device_class: power
   state_class: measurement
   
 - platform: modbus_controller  # 187 PV2 Power
   modbus_controller_id: sunsynk
   name: "PV2 Power"
   id: pv2_power
   register_type: holding
   address: 187
   unit_of_measurement: "W"
   accuracy_decimals: 0
   device_class: power
   state_class: measurement

 - platform: modbus_controller          # 183 Battery Voltage
   modbus_controller_id: sunsynk
   name: "Battery Voltage"
   id: sunsynk_esphome_battery_voltage
   register_type: holding
   address: 183
   unit_of_measurement: "V"
   accuracy_decimals: 1
   filters: #GOOD
     - lambda: |-
           if (x > 32767) return (x - 65535) / 100;
           else return x / 100;
   device_class: voltage
   state_class: measurement

 - platform: modbus_controller # 184 Battery SOC
   modbus_controller_id: sunsynk
   name: "Battery SOC"
   id: battery_soc
   register_type: holding
   address: 184
   unit_of_measurement: "%"
   accuracy_decimals: 0
   device_class: battery
   filters: #GOOD
    - lambda: |-
           if (x > 32767) return (x - 65535) /1;
           else return (x) /1;
           
 - platform: modbus_controller  # 216 Battery Charging Efficiency
   modbus_controller_id: sunsynk
   name: "Battery Charging Efficiency"
   id: battery_charging_efficiency
   register_type: holding
   address: 216
   unit_of_measurement: "%"
   accuracy_decimals: 1
   device_class: battery
   filters: #GOOD
    - lambda: |-
           if (x > 32767) return (x - 65535) /10;
           else return (x) /10;

 - platform: modbus_controller          # 059 Overall State
   modbus_controller_id: sunsynk
   name: "Overall State"
   id: sunsynk_overall_state
   register_type: holding
   address: 59
   
 - platform: modbus_controller          # 013 Firmware Control Board
   modbus_controller_id: sunsynk
   name: "Firmware Control Board"
   id: sunsynk_esphome_firmware_control_board
   register_type: holding
   address: 13

 - platform: modbus_controller          # 013 Firmware Comms Board
   modbus_controller_id: sunsynk
   name: "Firmware Comms Board"
   id: sunsynk_esphome_firmware_comms_board
   register_type: holding
   address: 14

 - platform: modbus_controller          # 079 Grid Frequency
   modbus_controller_id: sunsynk
   name: "Grid Frequency"
   id: sunsynk_esphome_grid_frequency
   register_type: holding
   address: 79
   unit_of_measurement: "hz"
   accuracy_decimals: 2
   filters: #GOOD
    - lambda: |-
           if (x > 32767) return (x - 65535) /100;
           else return (x) /100;
   #device_class: none
   state_class: measurement

 - platform: modbus_controller          #076 Grid Import Day (Buy)
   modbus_controller_id: sunsynk
   name: "Grid Import Day (Buy)"
   id: sunsynk_esphome_grid_import_day
   register_type: holding
   address: 76
   unit_of_measurement: "kWh"
   accuracy_decimals: 1
   device_class: energy
   state_class: total_increasing
   filters: # GOOD
    - lambda: |-
           if (x > 32767) return (x - 65535) / 10;
           else return x /10;

 - platform: modbus_controller          # 070 Battery Charge Day
   modbus_controller_id: sunsynk
   name: "Battery Charge Day"
   id: sunsynk_esphome_battery_charge_day
   register_type: holding
   address: 70
   unit_of_measurement: "kWh"
   accuracy_decimals: 1
   device_class: energy
   state_class: total_increasing
   filters: #GOOD
    - lambda: |-
           x = x / 10;
           if (x > 32767) return (x - 65535) /1;
           else return (x) /1;

 - platform: modbus_controller          # 071 Battery Discharge Day
   modbus_controller_id: sunsynk
   name: "Battery Discharge Day"
   id: sunsynk_esphome_battery_discharge_day
   register_type: holding
   address: 71
   unit_of_measurement: "kWh"
   accuracy_decimals: 1
   device_class: energy
   state_class: total_increasing
   filters: #GOOD
    - lambda: |-
           x = x / 10;
           if (x > 32767) return (x - 65535) /1;
           else return (x) /1;

 - platform: modbus_controller          # 154 Grid Inverter Voltage
   modbus_controller_id: sunsynk
   name: "Grid Inverter Voltage"
   id: sunsynk_esphome_grid_inverter_voltage
   register_type: holding
   address: 154
   unit_of_measurement: "V"
   accuracy_decimals: 1
   filters: #GOOD
     - lambda: |-
           if (x > 32767) return (x - 65535) /10;
           else return (x) /10;
   device_class: voltage
   state_class: measurement

 - platform: modbus_controller          # 164 Inverter Output Current
   modbus_controller_id: sunsynk
   name: "Inverter Output Current"
   id: sunsynk_esphome_inverter_output_current
   register_type: holding
   address: 164
   unit_of_measurement: "A"
   accuracy_decimals: 1
   device_class: current
   state_class: measurement
   value_type: S_WORD
   filters:
    - multiply: 0.01

 - platform: modbus_controller          # 166 Aux Output Power
   modbus_controller_id: sunsynk
   name: "Aux Output Power"
   id: sunsynk_esphome_aux_output_power
   register_type: holding
   address: 166
   unit_of_measurement: "W"
   accuracy_decimals: 0
   device_class: power
   state_class: measurement
   filters: #GOOD
     - lambda: |-
           if (x > 32767) return (x - 65535) /1;
           else return (x) /1;

 - platform: modbus_controller          # 167 Grid Inverter Load
   modbus_controller_id: sunsynk
   name: "Grid Inverter Load"
   id: sunsynk_esphome_grid_inverter_load
   register_type: holding
   address: 167
   unit_of_measurement: "W"
   accuracy_decimals: 0
   value_type: S_WORD
   filters: #GOOD
     - lambda: |-
           if (x > 32767) return (x - 65535) /1;
           else return (x) /1;
   device_class: power
   state_class: measurement

 - platform: modbus_controller          # 175 Inverter Output Power
   modbus_controller_id: sunsynk
   name: "Inverter Output Power"
   id: sunsynk_esphome_inverter_output_power
   register_type: holding
   address: 175
   unit_of_measurement: "W"
   accuracy_decimals: 0
   device_class: power
   value_type: S_WORD
   filters: #GOOD
    - lambda: |-
           if (x > 32767) return (0 - x + 65535) /-1;
           else return (0 - x) /-1;

 - platform: modbus_controller          # 190 Battery Output Power
   modbus_controller_id: sunsynk
   name: "Battery Output Power"
   id: sunsynk_esphome_battery_output_power
   register_type: holding
   address: 190
   unit_of_measurement: "W"
   accuracy_decimals: 0
   device_class: power
   value_type: S_WORD
   filters: #GOOD
    - lambda: |-
           if (x > 32767) return (x - 65535) /1;
           else return (x) /1;

 - platform: modbus_controller          # 191 Battery Output Current
   modbus_controller_id: sunsynk
   name: "Battery Output Current"
   id: sunsynk_esphome_battery_output_current
   register_type: holding
   address: 191
   unit_of_measurement: "A"
   accuracy_decimals: 1
   device_class: current
   state_class: measurement
   value_type: S_WORD
   filters: #GOOD
     - lambda: |-
           if (x > 32767) return (x - 65535) / 100;
           else return x / 100;

 - platform: modbus_controller          # 192 Load Frequency
   modbus_controller_id: sunsynk
   name: "Load Frequency"
   id: sunsynk_esphome_load_frequency
   register_type: holding
   address: 192
   unit_of_measurement: "hz"
   accuracy_decimals: 2
   filters: #GOOD
    - lambda: |-
           if (x > 32767) return (x - 65535) /100;
           else return (x) /100;
   #device_class: none
   state_class: measurement


 - platform: modbus_controller # 108 Day PV Power
   modbus_controller_id: sunsynk
   name: "Daily PV Power (kWh)"
   id: daily_pv_power_kwh
   register_type: holding
   address: 108
   unit_of_measurement: "kWh"
   accuracy_decimals: 2
   device_class: energy
   state_class: total_increasing
   filters:
     - multiply: 0.1

 - platform: modbus_controller #tried 60
   modbus_controller_id: sunsynk
   name: "Daily Load Power (kWh)"
   id: daily_load_power_kwh
   register_type: holding
   address: 84
   unit_of_measurement: "kWh"
   accuracy_decimals: 2
   device_class: energy
   state_class: total_increasing
   filters:
     - multiply: 0.1
 
 - platform: modbus_controller          # 182 Battery Temperature
   modbus_controller_id: sunsynk
   name: "SS Battery Temperature"
   id: sunsynk_esphome_battery_temperature
   register_type: holding
   address: 182
   unit_of_measurement: "°C"
   accuracy_decimals: 1
   device_class: temperature
   state_class: measurement
   filters: # GOOD
    - lambda: |-
           if (x > 32767) return ((x - 65535)-1000) / 10;
           else return ((x)-1000) / 10;


 - platform: modbus_controller          # 090 DC Transformer Temperature
   modbus_controller_id: sunsynk
   name: "SS DC Transformer Temperature"
   id: sunsynk_esphome_dctransformer_temperature
   register_type: holding
   address: 090
   unit_of_measurement: "°C"
   accuracy_decimals: 1
   device_class: temperature
   state_class: measurement
   filters: # GOOD
    - lambda: |-
           if (x > 32767) return ((x - 65535)-1000) / 10;
           else return ((x)-1000) / 10;

 - platform: modbus_controller          # 091 Radiator Temperature
   modbus_controller_id: sunsynk
   name: "SS DC Radiator Temperature"
   id: sunsynk_esphome_radiator_temperature
   register_type: holding
   address: 091
   unit_of_measurement: "°C"
   accuracy_decimals: 1
   device_class: temperature
   state_class: measurement
   filters: # GOOD
    - lambda: |-
           if (x > 32767) return ((x - 65535)-1000) / 10;
           else return ((x)-1000) / 10;

 #- platform: modbus_controller # 67 Month Grid Energy
 #  modbus_controller_id: sunsynk
 #  name: "Month Grid Energy (kWh)"
 #  id: month_grid_energy_kwh
 #  register_type: holding
 #  address: 67
 #  unit_of_measurement: "kWh"
 #  accuracy_decimals: 1
 #  device_class: energy
 #  state_class: total_increasing
 #  filters:
 #    - multiply: 0.1

 #- platform: modbus_controller # 66 Month Load Energy
 #  modbus_controller_id: sunsynk
 #  name: "Month Load Energy (kWh)"
 #  id: month_load_energy_kwh
 #  register_type: holding
 #  address: 66
 #  unit_of_measurement: "kWh"
 #  accuracy_decimals: 1
 #  device_class: energy
 #  state_class: total_increasing
 #  filters:
 #    - multiply: 0.1

 #- platform: modbus_controller # 65 Month PV Energy
 #  modbus_controller_id: sunsynk
 #  name: "Month PV Energy (kWh)"
 #  id: month_pv_energy_kwh
 #  register_type: holding
 #  address: 65
 #  unit_of_measurement: "kWh"
 #  accuracy_decimals: 1
 #  device_class: energy
 #  state_class: total_increasing
 #  filters:
 #    - multiply: 0.1

################################################ READ SETTINGS ################################################
 - platform: modbus_controller          # 250 Settings Timezone1
   modbus_controller_id: sunsynk
   name: "Setting Timezone1"
   id: sunsynk_esphome_setting_timezone1
   register_type: holding
   skip_updates: ${settings_skipped_updates}
   address: 250
   filters: #GOOD
    - lambda: |-
           if (x > 32767) return (x - 65535) /1;
           else return (x) /1;
   icon: "mdi:clock"

 - platform: modbus_controller          # 251 Settings Timezone2
   modbus_controller_id: sunsynk
   name: "Setting Timezone2"
   id: sunsynk_esphome_setting_timezone2
   register_type: holding
   skip_updates: ${settings_skipped_updates}
   address: 251   
   filters: #GOOD
    - lambda: |-
           if (x > 32767) return (x - 65535) /1;
           else return (x) /1;
   icon: "mdi:clock"


 - platform: modbus_controller          # 252 Settings Timezone3
   modbus_controller_id: sunsynk
   name: "Setting Timezone3"
   id: sunsynk_esphome_setting_timezone3
   register_type: holding
   skip_updates: ${settings_skipped_updates}
   address: 252
   filters: #GOOD
    - lambda: |-
           if (x > 32767) return (x - 65535) /1;
           else return (x) /1;
   icon: "mdi:clock"

 - platform: modbus_controller          # 253 Settings Timezone4
   modbus_controller_id: sunsynk
   name: "Setting Timezone4"
   id: sunsynk_esphome_setting_timezone4
   register_type: holding
   skip_updates: ${settings_skipped_updates}
   address: 253
   filters: #GOOD
    - lambda: |-
           if (x > 32767) return (x - 65535) /1;
           else return (x) /1;
   icon: "mdi:clock"

 - platform: modbus_controller          # 254 Settings Timezone5
   modbus_controller_id: sunsynk
   name: "Setting Timezone5"
   id: sunsynk_esphome_setting_timezone5
   register_type: holding
   skip_updates: ${settings_skipped_updates}
   address: 254
   icon: "mdi:clock"

 - platform: modbus_controller          # 255 Settings Timezone6
   modbus_controller_id: sunsynk
   name: "Setting Timezone6"
   id: sunsynk_esphome_setting_timezone6
   register_type: holding
   skip_updates: ${settings_skipped_updates}
   address: 255
   filters: #GOOD
    - lambda: |-
           if (x > 32767) return (x - 65535) /1;
           else return (x) /1;
   icon: "mdi:clock"


 - platform: modbus_controller          # 268 Settings SoC Timezone1
   modbus_controller_id: sunsynk
   name: "Setting SoC Timezone1"
   id: sunsynk_esphome_setting_soc_timezone1
   register_type: holding
   skip_updates: ${settings_skipped_updates}
   address: 268

 - platform: modbus_controller          # 269 Settings SoC Timezone2
   modbus_controller_id: sunsynk
   name: "Setting SoC Timezone2"
   id: sunsynk_esphome_setting_soc_timezone2
   register_type: holding
   skip_updates: ${settings_skipped_updates}
   address: 269

 - platform: modbus_controller          # 270 Settings SoC Timezone3
   modbus_controller_id: sunsynk
   name: "Setting SoC Timezone3"
   id: sunsynk_esphome_setting_soc_timezone3
   register_type: holding
   skip_updates: ${settings_skipped_updates}
   address: 270

 - platform: modbus_controller          # 271 Settings SoC Timezone4
   modbus_controller_id: sunsynk
   name: "Setting SoC Timezone4"
   id: sunsynk_esphome_setting_soc_timezone4
   register_type: holding
   skip_updates: ${settings_skipped_updates}
   address: 271

 - platform: modbus_controller          # 272 Settings SoC Timezone5
   modbus_controller_id: sunsynk
   name: "Setting SoC Timezone5"
   id: sunsynk_esphome_setting_soc_timezone5
   register_type: holding
   skip_updates: ${settings_skipped_updates}
   address: 272

 - platform: modbus_controller          # 273 Settings SoC Timezone6
   modbus_controller_id: sunsynk
   name: "Setting SoC Timezone6"
   id: sunsynk_esphome_setting_soc_timezone6
   register_type: holding
   skip_updates: ${settings_skipped_updates}
   address: 273

 - platform: modbus_controller          # 274 Settings Grid Charge Timezone1
   modbus_controller_id: sunsynk
   name: "Setting Grid Charge Timezone1"
   id: sunsynk_esphome_setting_grid_charge_timezone1
   register_type: holding
   skip_updates: ${settings_skipped_updates}
   address: 274

 - platform: modbus_controller          # 275 Settings Grid Charge Timezone2
   modbus_controller_id: sunsynk
   name: "Setting Grid Charge Timezone2"
   id: sunsynk_esphome_setting_grid_charge_timezone2
   register_type: holding
   skip_updates: ${settings_skipped_updates}
   address: 275
   
 - platform: modbus_controller          # 276 Settings Grid Charge Timezone3
   modbus_controller_id: sunsynk
   name: "Setting Grid Charge Timezone3"
   id: sunsynk_esphome_setting_grid_charge_timezone3
   register_type: holding
   skip_updates: ${settings_skipped_updates}
   address: 276
   
 - platform: modbus_controller          # 277 Settings Grid Charge Timezone4
   modbus_controller_id: sunsynk
   name: "Setting Grid Charge Timezone4"
   id: sunsynk_esphome_setting_grid_charge_timezone4
   register_type: holding
   skip_updates: ${settings_skipped_updates}
   address: 277
   
 - platform: modbus_controller          # 278 Settings Grid Charge Timezone5
   modbus_controller_id: sunsynk
   name: "Setting Grid Charge Timezone5"
   id: sunsynk_esphome_setting_grid_charge_timezone5
   register_type: holding
   skip_updates: ${settings_skipped_updates}
   address: 278
   
 - platform: modbus_controller          # 279 Settings Grid Charge Timezone6
   modbus_controller_id: sunsynk
   name: "Setting Grid Charge Timezone6"
   id: sunsynk_esphome_setting_grid_charge_timezone6
   register_type: holding
   skip_updates: ${settings_skipped_updates}
   address: 279

 - platform: modbus_controller          # 109 DC1 Voltage
   modbus_controller_id: sunsynk
   name: "DC1 Voltage"
   id: sunsynk_esphome_dc1_voltage
   register_type: holding
   address: 109
   unit_of_measurement: "V"
   device_class: voltage
   state_class: measurement
   filters:
     - multiply: 0.1

 - platform: modbus_controller          # 111 DC2 Voltage
   modbus_controller_id: sunsynk
   name: "DC2 Voltage"
   id: sunsynk_esphome_dc2_voltage
   register_type: holding
   address: 111
   unit_of_measurement: "V"
   filters:
     - multiply: 0.1
   device_class: voltage
   state_class: measurement

 - platform: modbus_controller          # 110 DC1 Output Current
   modbus_controller_id: sunsynk
   name: "DC1 Current"
   id: sunsynk_esphome_dc1_current
   register_type: holding
   address: 110
   unit_of_measurement: "A"
   accuracy_decimals: 1
   device_class: current
   state_class: measurement
   filters:
    - multiply: 0.1

 - platform: modbus_controller          # 112 DC2 Output Current
   modbus_controller_id: sunsynk
   name: "DC2 Current"
   id: sunsynk_esphome_dc2_current
   register_type: holding
   address: 112
   unit_of_measurement: "A"
   accuracy_decimals: 1
   device_class: current
   state_class: measurement
   filters:
    - multiply: 0.1

switch:
 - platform: modbus_controller  # 248 Toggle System Timer
   use_write_multiple: true
   modbus_controller_id: sunsynk
   name: "Toggle System Timer" 
   id: sunsynk_esphome_toggle_Time_of_Use
   register_type: holding
   address: 248
   bitmask: 1
   entity_category: config
   icon: "mdi:toggle-switch"

 - platform: modbus_controller  # 243 Priority Load
   use_write_multiple: true
   modbus_controller_id: sunsynk
   name: "Toggle Priority Load" 
   id: sunsynk_esphome_toggle_priority_load
   register_type: holding
   address: 243
   bitmask: 1
   entity_category: config
   icon: "mdi:toggle-switch"

 - platform: modbus_controller          # 274 Toggle Grid Charge Timezone1
   use_write_multiple: true
   modbus_controller_id: sunsynk
   name: "Toggle Grid Charge Timezone1"
   id: sunsynk_esphome_toggle_grid_charge_timezone1
   register_type: holding
   address: 274
   bitmask: 1
   entity_category: config
   icon: "mdi:toggle-switch"

 - platform: modbus_controller          # 275 Toggle Grid Charge Timezone2
   modbus_controller_id: sunsynk
   use_write_multiple: true
   name: "Toggle Grid Charge Timezone2"
   id: sunsynk_esphome_toggle_grid_charge_timezone2
   register_type: holding
   address: 275
   bitmask: 1
   entity_category: config
   icon: "mdi:toggle-switch"

 - platform: modbus_controller          # 276 Toggle Grid Charge Timezone3
   modbus_controller_id: sunsynk
   use_write_multiple: true
   name: "Toggle Grid Charge Timezone3"
   id: sunsynk_esphome_toggle_grid_charge_timezone3
   register_type: holding
   address: 276
   bitmask: 1
   entity_category: config
   icon: "mdi:toggle-switch"

 - platform: modbus_controller          # 277 Toggle Grid Charge Timezone4
   modbus_controller_id: sunsynk
   use_write_multiple: true
   name: "Toggle Grid Charge Timezone4"
   id: sunsynk_esphome_toggle_grid_charge_timezone4
   register_type: holding
   address: 277
   bitmask: 1
   entity_category: config
   icon: "mdi:toggle-switch"

 - platform: modbus_controller          # 278 Toggle Grid Charge Timezone5
   modbus_controller_id: sunsynk
   use_write_multiple: true
   name: "Toggle Grid Charge Timezone5"
   id: sunsynk_esphome_toggle_grid_charge_timezone5
   register_type: holding
   address: 278
   bitmask: 1
   entity_category: config
   icon: "mdi:toggle-switch"

 - platform: modbus_controller          # 279 Toggle Grid Charge Timezone6
   modbus_controller_id: sunsynk
   use_write_multiple: true
   name: "Toggle Grid Charge Timezone6"
   id: sunsynk_esphome_toggle_grid_charge_timezone6
   register_type: holding
   address: 279
   bitmask: 1
   entity_category: config
   icon: "mdi:toggle-switch"

number:
  - platform: modbus_controller         # 268 Settings SoC Timezone1
    use_write_multiple: true
    modbus_controller_id: sunsynk
    id: sunsynk_esphome_set_soc_timezone1
    name: "Set SoC Timezone1"
    unit_of_measurement: "%"
    address: 268
    min_value: 0
    max_value: 100
    step: 5
    value_type: U_WORD  

  - platform: modbus_controller         # 269 Settings SoC Timezone2
    use_write_multiple: true
    modbus_controller_id: sunsynk
    id: sunsynk_esphome_set_soc_timezone2
    name: "Set SoC Timezone2"
    unit_of_measurement: "%"
    address: 269
    min_value: 0
    max_value: 100
    step: 5
    value_type: U_WORD  

  - platform: modbus_controller         # 270 Settings SoC Timezone3
    use_write_multiple: true
    modbus_controller_id: sunsynk
    id: sunsynk_esphome_set_soc_timezone3
    name: "Set SoC Timezone3"
    unit_of_measurement: "%"
    address: 270
    min_value: 0
    max_value: 100
    step: 5
    value_type: U_WORD  

  - platform: modbus_controller         # 271 Settings SoC Timezone4
    use_write_multiple: true
    modbus_controller_id: sunsynk
    id: sunsynk_esphome_set_soc_timezone4
    name: "Set SoC Timezone4"
    unit_of_measurement: "%"
    address: 271
    min_value: 0
    max_value: 100
    step: 5
    value_type: U_WORD  

  - platform: modbus_controller         # 272 Settings SoC Timezone5
    use_write_multiple: true
    modbus_controller_id: sunsynk
    id: sunsynk_esphome_set_soc_timezone5
    name: "Set SoC Timezone5"
    unit_of_measurement: "%"
    address: 272
    min_value: 0
    max_value: 100
    step: 5
    value_type: U_WORD  

  - platform: modbus_controller         # 273 Settings SoC Timezone6
    use_write_multiple: true
    modbus_controller_id: sunsynk
    id: sunsynk_esphome_set_soc_timezone6
    name: "Set SoC Timezone6"
    unit_of_measurement: "%"
    address: 273
    min_value: 0
    max_value: 100
    step: 5
    value_type: U_WORD  

text_sensor:
  - platform: template
    name: "Program1_test"
    lambda: |-
        int minutes, hours;
        if (id(sunsynk_esphome_setting_timezone1).state) {
        minutes = static_cast<int>(id(sunsynk_esphome_setting_timezone1).state) % 100;
        hours = static_cast<int>(id(sunsynk_esphome_setting_timezone1).state) / 100;
        } else {
          minutes = 0;
          hours = 0;
        }
        char formatted_time[6];
        snprintf(formatted_time, sizeof(formatted_time), "%02d:%02d", hours, minutes);
        return esphome::optional<std::string>(formatted_time);
  - platform: template
    name: "Program2_test"
    lambda: |-
        int minutes, hours;
        if (id(sunsynk_esphome_setting_timezone2).state) {
        minutes = static_cast<int>(id(sunsynk_esphome_setting_timezone2).state) % 100;
        hours = static_cast<int>(id(sunsynk_esphome_setting_timezone2).state) / 100;
        } else {
          minutes = 0;
          hours = 0;
        }
        char formatted_time[6];
        snprintf(formatted_time, sizeof(formatted_time), "%02d:%02d", hours, minutes);
        return esphome::optional<std::string>(formatted_time);
